/* =============================================================== */
/*   CORSO DI PROGRAMMAZIONE IN C (C89)                            */
/*   Claudio Fornaro                                               */
/*   Ver. 3 - 2021                                                 */
/*   14-Funzioni_Soluzioni.txt                                     */
/* =============================================================== */

/* =============================================================== */
/*   1                                                             */
/* =============================================================== */

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define NUM 10

double log2(double valore);

int main()
{
   int i;
   double a;
   
   for (i=0; i<NUM; i++)
   {
      printf("Introdurre un numero: ");
      scanf("%lf", &a);      
      printf("Il log2 di %f vale: %f\n", a, log2(a));
   }
   
   return EXIT_SUCCESS;
}

/*--------------------------------------------------------*/
double log2(double x)
{
   return log(x)/log(2.0);
}


/* =============================================================== */
/*   2                                                             */
/* =============================================================== */

#include <stdio.h>
#include <stdlib.h>
#define NUM 10

int contacifre(int n);

int main()
{
   int i;
   int x;

   for (i=0; i<NUM; i++)
   {
      printf("Introdurre un numero: ");
      scanf("%d", &x);
      printf("Il numero %d ha %d cifre\n", x, contacifre(x));
   }

   return EXIT_SUCCESS;
}

/*--------------------------------------------------------*/
int contacifre(int n)
{
    int cont = 0;

    do
    {
        cont++;
        n /= 10;
    }while(n != 0);  /* != cosi' funziona anche con i n<0 */

    return cont;
}


/* =============================================================== */
/*   3                                                             */
/* =============================================================== */

#include <stdio.h>
#include <stdlib.h>
#define NUM 10

double radice(double valore, double precisione);

int main()
{
   int i;
   double x, e;
   
   for (i=0; i<NUM; i++)
   {
      printf("Introdurre un numero: ");
      scanf("%lf", &x);      
      printf("Introdurre la precisione: ");
      scanf("%lf", &e);      
      printf("Radice quadrata di %f = %.15f\n", x, radice(x,e));
   }
   
   return EXIT_SUCCESS;
}


/*--------------------------------------------------------*/
double radice(double a, double prec)
{
   double xn; /* x nuova approssimazione */
   double xp; /* x precedente approssimazione */
   xn = a;
   do
   {
      xp = xn;
      xn = 0.5 * (xp + a/xp);
   }while (xp-xn > prec);

   return xn;
}


/* =============================================================== */
/*   4                                                             */
/* =============================================================== */

#include <stdio.h>
#include <stdlib.h>
#define DIM1 8
#define DIM2 10

double media(double vettore[], int lunghezza);

int main()
{
   int i;
   double a[DIM1], b[DIM2];
   
   printf("Inserire %d valori per a:\n", DIM1);
   for (i=0; i<DIM1; i++)
      scanf("%lf", &a[i]);      
   printf("Inserire %d valori per b:\n", DIM2);
   for (i=0; i<DIM2; i++)
      scanf("%lf", &b[i]);      

   printf("La media di a vale: %f\n", media(a,DIM1));
   printf("La media di b vale: %f\n", media(b,DIM2));
   
   return EXIT_SUCCESS;
}


/*--------------------------------------------------------*/
double media(double v[], int len)
{
   double somma=0;
   int i;
   
   for (i=0; i<len; i++)
      somma += v[i];

   return somma/len;
}


/* =============================================================== */
/*   5                                                             */
/* =============================================================== */

#include <stdio.h>
#include <stdlib.h>
#define MAXNUM 100
#define ERRORE -1
#define OK 0

int leggiVett(int vet[], int *n);
void inverti(int vettore[], int n);
void visualVett(int v[], int n);

int main()
{
    int vet[MAXNUM];
    int dim;

    /* viene passato l'indirizzo di n */
    if (leggiVett(vet, &dim) == ERRORE)
    {
        printf("Errore lettura dati.\n");
        return EXIT_FAILURE;
    }

    inverti(vet, dim);
    visualVett(vet, dim);

    return EXIT_SUCCESS;
}

/*--------------------------------------------------------*/
/* n passato per riferimento per essere restituito al main */
int leggiVett(int vet[], int *n)
{
    int i;

    do
    {
        printf("Dimensione del vettore: ");
        scanf ("%d", n);  /* notare che manca la & */
    }while(*n < 1 || *n > MAXNUM);

    for(i=0; i<*n; i++)
    {
        printf("Introduci vet[%d] = ", i);
        if(scanf ("%d", &vet[i]) != 1)
            return ERRORE; /* es. inserito una lettera */
    }

    return OK;
}

/*--------------------------------------------------------*/
void inverti(int vettore[], int n)
{
    int i;
    int temp;

    for(i=0; i < n/2 ; i++)
    {
        temp = vettore[i];
        vettore[i] = vettore[n-1-i];
        vettore[n-1-i]=temp;
    }
}

/*--------------------------------------------------------*/
void visualVett(int v[], int n)
{
    int i;

    for(i=0; i<n; i++)
        printf("%d ", v[i]);

    putchar('\n');
}


/* =============================================================== */
/*   6                                                             */
/* =============================================================== */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAXNUM 100

void rovescia(char []); /* nel prot. il nome puo' essere omesso */

int main()
{
   char v[MAXNUM];

   printf("Introduci la stringa: ");
   gets(v);

   rovescia(v);
   printf("%s\n", v);

   return EXIT_SUCCESS;
}


/*--------------------------------------------------------*/
void rovescia(char s[])
{
   int i, len;
   char t;

   len=strlen(s);
   for (i=0; i<len/2; i++)
   {
      t=s[i];
      s[i]=s[len-1-i];
      s[len-1-i]=t;
   }
}

/* Note
   len-1-i e' l'indice dell'elemento i-esimo contato da destra.
   Il ciclo FOR poteva essere anche questo (bisogna definire j): 
   for (i=0, j=len-1; i<j; i++, j--)
   {
      t=s[i];
      s[i]=s[j];
      s[j]=t;
   }
*/

/* Altra soluzione */

void rovescia(char s[])
{
   int i, j, len;
   char temp[MAXNUM];

   len=strlen(s);
   for (i=0, j=len-1; i<len; i++, j--)
      temp[i]=s[j];
   temp[len] = '\0';
   strcpy(s, temp);
}

/* Nota
   Crea una nuova stringa prelevando i caratteri dalla fine della 
   stringa data, la ricopia in s perche' solo s e' condivisa con il
   chiamante
*/


/* =============================================================== */
/*   7                                                             */
/* =============================================================== */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAXNUM 100

int contastr(char *stringa_dove_cercare, char *stringa_da_cercare);

int main()
{
   char v[MAXNUM], w[MAXNUM];

   printf("Introduci la stringa dove cercare: ");
   gets(v);
   printf("Introduci la stringa da cercare: ");
   gets(w);

   printf("La stringa e' stata trovata %d volte\n", contastr(v,w));

   return EXIT_SUCCESS;
}

/*--------------------------------------------------------*/
int contastr(char *a, char *x)
{
   int len, cont=0;

   len=strlen(x);
   while (*(a+len-1) != '\0')   /* ultimo chr di a valutato da */
      if (strncmp(a++, x, len) == 0)                /* strncmp */
         cont++;

   return cont;
}

/* soluzione alternativa 
int contastr(char *a, char *x)
{
   int i, j, lena, lenx, cont=0;

   lena=strlen(a);
   lenx=strlen(x);
   for (i=0; i<lena-lenx+1; i++)
   {
      for (j=0; j<lenx; j++)
         if(a[i+j]!=x[j])
            break;    /* c'e' un chr non corrispondente */
      if (j==lenx)    /* vero se non ha mai eseguito break */
         cont++;
   }
   return cont;
}
*/


/* =============================================================== */
/*   8                                                             */
/* =============================================================== */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAXNUM 100

void undup(char *);

int main()
{
   char stringa[MAXNUM];

   printf("Introduci la stringa: ");
   gets(stringa);

   undup(stringa);
   printf("La stringa senza i duplicati e':\n%s\n", stringa);

   return EXIT_SUCCESS;
}


/*--------------------------------------------------------*/
void undup(char *s)
{
   int i, j;
   int len;
   int k; /* indice dell'ultima posizione con chr non duplicati */


   len = (int)strlen(s);
   k = 0; /* il primo non puo' essere duplicato e ha indice 0 */
   for (i=1; i<len; i++)
   {
      /* cerca nei precedenti a k (incluso) */
      for (j=k; j>=0 && s[j] != s[i]; j--)
         ;
      if (j<0)            /* se non lo trova, j arriva a -1 */
         s[++k] = s[i];
   }
   s[++k] = '\0';   /* termina la stringa */
}


/* Altra soluzione */
void undup(char *s)
{
   int i;
   int len; /* lunghezza stringa in input */
   int k;   /* indice dell'ultima posizione con chr non duplicati */
   char car[256] = {0}; /* tutti i flag sono inizializzati a 0 */

   len = (int)strlen(s);
   k = -1; /* si posiziona prima del primo carattere */
   for (i=0; i<len; i++)
   {
      if (car[(int)s[i]] == 0)  /* considera il flag relativo al */
      {                         /*   carattere s[i] */
         car[(int)s[i]] = 1;    /* imposta il flag a 1 */
         s[++k] = s[i];         /* lo copia alla posizione ++k */
      }
   }
   s[++k] = '\0';   /* termina la stringa */
}
/* Nota
   Ogni elemento del vettore car corrisponde ad un carattere del
   codice ASCII; car[65] e' l'elemento corrispondente alla 'A'.
   car[] e' un vettore di flag e ogni elemento vale 1 se e' già stata
   incontrata la lettera con quel codice ASCII (car[65] vale 1 se si e'
   gia' trovata una 'A'), mentre 0 vuol dire che quel carattere non e'
   stato ancora trovato. Questo algoritmo e' piu' veloce in quanto
   non c'e' la ricerca: valuta solo il flag corrispondente
*/

/* Altra soluzione */
void undup(char *s)
{
   int i, j, k;
   int len;

   len = (int)strlen(s);
   for (i=1; i<len; i++)
   {
      /* cerca nei precedenti a i (escluso) */
      for (j=i-1; j>=0 && s[j] != s[i]; j--)
         ;
      if (j>=0)            /* se lo trova, j e' >= 0 */
         s[i] = '\0';
   }
   /* ora copia tutti i caratteri escludendo quelli di codice \0 */
   k=-1;
   for (i=0; i<len; i++)
      if (s[i] != '\0')
         s[++k]=s[i];
   s[++k] = '\0';   /* termina la stringa */
}
/* Nota
   In questa soluzione, ogni carattere ripetuto viene sostituito
   con un carattere che non si suppone l'utente introduca, ad
   esempio il carattere \0. Questo comporta una limitazione all'uso 
   del programma (ossia non funziona con stringhe _binarie_ che 
   contengono un carattere \0, una stringa normale non contiene il
   carattere \0 che alla fine)
*/


/* =============================================================== */
/*   9                                                             */
/* =============================================================== */

#include <stdio.h>
#include <stdlib.h>
#define MAXNUM 10

void ordina(int vettore[], int lunghezza, int ordinamento);

int main()
{
   int v[MAXNUM];
   int i, len, ord;

   printf("Quanti elementi? ");
   scanf("%d", &len);

   for (i=0; i<len; i++)
   {
      printf("Elemento %d: ", i);
      scanf("%d", &v[i]);
   }

   do
   {
      printf("Ordinamento crescente [1] o decrescente [0]? ");
      scanf("%d", &ord);
   }while(ord != 0 && ord != 1);
   
   ordina(v,len,ord);
   for (i=0; i<len; i++)
      printf("Elemento %d: %d\n", i, v[i]);
   
   return EXIT_SUCCESS;
}


/*--------------------------------------------------------*/
void ordina(int v[], int len, int ord)
{
   int i, j;
   int t;

   for (i=0; i<len-1; i++)
      for (j=i+1; j<len; j++)
         if (ord==1 && v[i] > v[j])
         {
            t=v[i];
            v[i]=v[j];
            v[j]=t;
         }
         else if (ord==0 && v[i] < v[j])
         {
            t=v[i];
            v[i]=v[j];
            v[j]=t;
         }
}

/* Nota
   La funzione ordina si potrebbe condensare in questa:

void ordina(int v[], int len, int ord)
{
   int i, j;
   int t;

   for (i=0; i<len-1; i++)
      for (j=i+1; j<len; j++)
         if (ord==1 && v[i] > v[j] || ord==0 && v[i] < v[j])
         {
            t=v[i];
            v[i]=v[j];
            v[j]=t;
         }
}

   Ricercando l'efficienza, possiamo considerare che se poniamo:
     X = (ord==1)
     Y = (v[i] < v[j])
   la condizione puo' essere scritta
     X && !Y || !X && Y
   (in algebra booleana si scrive XY'+X'Y).
   E' vero che !(v[i]<v[j]) equivale a v[i]>=v[j] e non a v[i]>v[j],
   ma l'effetto di questa differenza e' lo scambio dei valori
   uguali, cosa che aggiunge una trascurabile inefficienza.
   L'espressione booleana XY'+X'Y equivale a: A EXOR B.
   In C non esiste l'operatore logico EXOR, tuttavia esiste quello
   bitwise che può essere utilizzato se X e Y valgono 0 o 1. Essendo
   questo il caso (infatti X e Y sono il risultato di un confronto),
   la condizione finale puo' essere scritta:
     (ord==1) ^ (v[i]<v[j])
   Nel caso la velocita' sia un requisito fondamentale, la soluzione
   migliore e' quella con il minor numero di controlli; in questo
   caso dunque conviene duplicare tutto il codice separando i due 
   ordinamenti crescente e decrescente. 
*/


/* =============================================================== */
/*   10                                                            */
/* =============================================================== */

#include <stdio.h>
#include <stdlib.h>
#define MAXCOLONNE 10
#define MAXRIGHE1 8
#define MAXRIGHE2 12

double media(double M[][MAXCOLONNE], int righe, int colonne);

int main()
{
   int i, j;
   double Mx1[MAXRIGHE1][MAXCOLONNE];
   double Mx2[MAXRIGHE2][MAXCOLONNE];

   printf("Inserire i valori per Mx1:\n");
   for (i=0; i<MAXRIGHE1; i++)
      for (j=0; j<MAXCOLONNE; j++)
      {
         printf("Mx1[%d][%d]: ", i, j);
         scanf("%lf", &Mx1[i][j]);
      }

   printf("Inserire i valori per Mx2:\n");
   for (i=0; i<MAXRIGHE2; i++)
      for (j=0; j<MAXCOLONNE; j++)
      {
         printf("Mx2[%d][%d]: ", i, j);
         scanf("%lf", &Mx2[i][j]);
      }
   printf("La media di Mx1 e': %f\n", 
                        media(Mx1, MAXRIGHE1, MAXCOLONNE));
   printf("La media di Mx2 e': %f\n",
                        media(Mx2, MAXRIGHE2, MAXCOLONNE));

   return EXIT_SUCCESS;
}


/*--------------------------------------------------------*/
double media(double M[][MAXCOLONNE], int righe, int colonne)
{
   double somma=0;
   int i, j;

   for (i=0; i<righe; i++)
      for (j=0; j<colonne; j++)
       somma += M[i][j];
   return somma/(righe*colonne);
}


/* =============================================================== */
/*   11                                                            */
/* =============================================================== */

#include <stdio.h>
#include <stdlib.h>
#define MAXNUM 100

void sommaVett(const int a[], const int b[], int r[], int n);

int main()
{
   int x[MAXNUM];
   int y[MAXNUM];
   int risultato[MAXNUM];
   int n;
   int i;

   do {
      printf("Lunghezza dei vettori? ");
      scanf("%d", &n);
   }while (n<1 || n>MAXNUM);

   for (i=0; i<n; i++)
   {
      printf("x(%d): ", i);
      scanf("%d", &x[i]);
   }

   for (i=0; i<n; i++)
   {
      printf("y(%d): ", i);
      scanf("%d", &y[i]);
   }

   sommaVett(x, y, risultato, n);

   for (i=0; i<n; i++)
      printf("risultato(%d): %d\n", i, risultato[i]);

   return EXIT_SUCCESS;
}


/*--------------------------------------------------------*/
void sommaVett(const int a[], const int b[], int r[], int n)
{
   int i;

   for (i=0; i<n; i++)
      r[i] = a[i] + b[i];
}

/* Note
   Il vettore da riempire con il risultato della somma viene
    allocato nel chiamante (main) e passato alla funzione, il 
    contenuto iniziale di questo vettore e' irrilevante.
   Per garantire la non modifica dei vettori si puo' usare la
    keyword const come indicato.
*/


/* =============================================================== */
/*  12                                                             */
/* =============================================================== */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#define MAX 100
#define FILENAME "C:\\Parole.txt"  /* MODIFICARE OPPORTUNAMENTE */

void ordina(char []);
void inMinuscolo(char[]);

int main()
{
   char stringa[MAX], parola[MAX], parolaOrdinata[MAX];
   FILE *fp;

   printf("Parola di cui cercare gli anagrammi: ");
   gets(stringa);
   inMinuscolo(stringa); /* la mette in minuscolo */
   ordina(stringa);      /* riordina alfabeticamente i caratteri */

   if ( (fp=fopen(FILENAME,"r")) == NULL )
   {
      fprintf(stderr, "Non posso aprire il file %s\n", FILENAME);
      return EXIT_FAILURE;
   }

   if (fscanf(fp, "%s", parola) == EOF) /* primo valore */
   {
      fprintf(stderr, "File %s vuoto\n", FILENAME);
      return EXIT_FAILURE;
   }
   
   do
   {
      strcpy(parolaOrdinata, parola);
      inMinuscolo(parolaOrdinata); /* la mette in minuscolo */
      ordina(parolaOrdinata);      /* riordina alfabet. i chr */
      if (strcmp(stringa,parolaOrdinata) == 0)
         printf("%s\n", parola);
   }while(fscanf(fp, "%s", parola) != EOF);
   
   fclose(fp);

   return EXIT_SUCCESS;
}


/*--------------------------------------------------------*/
void inMinuscolo(char s[])
{
   int i;
   for (i=0; s[i] != '\0'; i++)
      s[i] = (char)tolower(s[i]);
}


/*--------------------------------------------------------*/
void ordina(char s[]) /* selection sort */
{
   int i, j, jmin, len;
   char t;
   
   len = strlen(s);
   for (i=0; i<len-1; i++)
   {
      jmin = i;
      for (j=i+1; j<len; j++)
         if (s[j] < s[jmin])
            jmin = j;   
      t=s[jmin];
      s[jmin]=s[i];
      s[i]=t;
   }
}


/* =============================================================== */
/*  13                                                             */
/* =============================================================== */

#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#define MAXVETT 10
#define MAXSTRING 80

int parseToIntVect(char *stringa, int vett[], int n);

int main()
{
   int v[MAXVETT];
   char s[MAXSTRING];
   int i, n;

   printf("Introdurre stringa da analizzare:\n");
   gets(s);
   n = parseToIntVect(s, v, MAXVETT);
   printf("Letti %d valori:\n", n);
   for (i=0; i<n; i++)
      printf("%d\n", v[i]);
   return EXIT_SUCCESS;
}

/*--------------------------------------------------------*/
int parseToIntVect(char *stringa, int vett[], int n)
{
   int i, k, l, cont;
   char t[MAXSTRING];

   cont=0;
   l=strlen(stringa);
   i=0;
   do
   {
      /* salta whitespace iniziali del campo */
      while (i<l && isspace(stringa[i]))
         i++;

      /* accumula i caratteri fino al prossimo whitespace */
      k=0;
      while (i<l && !isspace(stringa[i]))  /* anche il - e' letto */
         t[k++]=stringa[i++];

      if (k>0) /* se k==0 significa che non ha letto alcun valore */
         t[k]='\0';
      vett[cont++]=atoi(t);
   }while(i<l && cont<n);

   return cont;
}

/* Altra soluzione (a stati, vedere nota in fondo) */

int parseToIntVect(char *stringa, int vett[], int n)
{
   enum {FUORI, DENTRO} stato;
   int i, k, l, cont;
   char t[MAXSTRING];

   stato = FUORI;

   cont=0;
   l=strlen(stringa);
   for (i=0; i<l && cont < n; i++)
      switch(stato)
      {
      case FUORI:
         if (!isspace(stringa[i])) /* entra DENTRO */
         {
            k=0;
            t[k++]=stringa[i];
            stato = DENTRO;
         }
         break;
      case DENTRO:
         if (!isspace(stringa[i])) /* resta dentro */
            t[k++]=stringa[i];
         else                      /* esce FUORI */
         {
            t[k]='\0';
            vett[cont++]=atoi(t);
            stato = FUORI;
         }
         break;
      }
      if (stato == DENTRO) /* se la stringa finisce con un numero */
      {
         t[k]='\0';
         vett[cont++]=atoi(t);
      }

   return cont;
}

/* Nota 
   Si usa un approccio a stati: 
   stato DENTRO_un_numero e stato FUORI_da_un_numero.
   Si leggono i caratteri uno per uno e a seconda dello stato 
   attuale viene intrappresa una diversa azione:
   - se e' nello stato FUORI:
     - se trova un non-whitespace cambia stato in DENTRO e copia
       il carattere in t[0]
     - altrimenti non fa nulla
   - se e' nello stato DENTRO:
     - se trova un non-whitespace copia il carattere in t (e 
       resta nello stato DENTRO)
     - altrimenti termina t, la passa ad atoi(), mette il valore
       in vett[cont], incrementa cont, esce FUORI (o meglio va 
       nello stato FUORI)
   Se la stringa termina con un numero, bisogna terminare la
   stringa, mettere l'ultimo valore in vett[] e incrementare cont
*/


/* =============================================================== */
/*  14                                                             */
/* =============================================================== */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAXCIFRE 1000

void moltiplica(char a[], int la, char x, char r[]);
void aggiungiZeri(char a[], int la, int quanti);
void somma(char a[], char b[], int cifre);

int main()
{
   int i, j;
   char p[MAXCIFRE+1], s[MAXCIFRE+1], q;
   char ris[MAXCIFRE*2+1]={0}, t[MAXCIFRE*2+1]={0};
   int lp, ls, lris;

   printf("Primo numero (max %d cifre): ", MAXCIFRE);
   gets(p);
   printf("Secondo numero (max %d cifre): ", MAXCIFRE);
   gets(s);
   lp=strlen(p);
   ls=strlen(s);
   lris = lp+ls; /* la lunghezza di <ris> e' al massimo lp+ls */

   /* poiche' il risultato ha in genere piu' cifre e poiche' una
      stringa puo' essere ampliata solo al fondo, si inverte
      la posizione di ciascuna cifra cosi' che p[0] contenga la
      cifra meno significativa (LSD), ossia quella di potenza 0,
      lo stesso viene fatto per la stringa s */
   for (i=0, j=lp-1; i<lp/2; i++, j--)
      q=p[i], p[i]=p[j], p[j]=q;
   for (i=0, j=ls-1; i<ls/2; i++, j--)
      q=s[i], s[i]=s[j], s[j]=q;

   /* trasforma ogni carattere di p e di s nella cifra decimale */
   for (i=0; i<lp; i++)
      p[i] -= '0';
   for (i=0; i<ls; i++)
      s[i] -= '0';

   for (i=0; i<ls; i++) /* per ciascuna cifra di s dal LSD al MSD */
   {
      moltiplica(p, lp, s[i], t);
      aggiungiZeri(t, lp+1, i);    /* dopo la moltiplicazione la max
                                      lunghezza di t è <lp+1> */
      somma(ris, t, lp+i+1); /* all'iterazione i, <lp+i+1> e' la max
                                lunghezza sia di ris sia di t */
   }

   /* il numero di cifre finale e' composto o da <lp+ls> o da
      <lp+ls-1> cifre, per conoscerlo basta verificare se la prima
      cifra (MSD, che pero' e' a destra perche' invertita) e' 0 */
   if (ris[lris-1]==0)
      lris--;
   /* solo se il risultato e' zero, il primo carattere e' 0, quindi
      si eliminano tutti gli altri zeri impostando lris a 1 per
      visualizzare uno zero solo */
   if (ris[lris-1]==0)
      lris=1;
   /* ri-inverte la posizione dei caratteri in modo che il primo sia
      il MSD, notare che la stringa e' gia' terminata da un \0
      grazie all'inizializzazione di ris */
   for (i=0, j=lris-1; i<lris/2; i++, j--)
      q=ris[i], ris[i]=ris[j], ris[j]=q;

   /* riconverte in stringa il numero ris, trasformando in carattere
      ogni cifra di ris */
   for (i=0; i<lris; i++)
      ris[i] += '0';

   printf("Risultato: %s\n", ris);

   return EXIT_SUCCESS;
}


/*--------------------------------------------------------*/
/* moltiplica <a> per <x> e mette il risultato in <r>, serve passare
   la lunghezza di <a> in quanto avendo trasformato i caratteri '0'
   in valori 0, questi coincidono con il '\0' e quindi non si puo'
   piu' usare strlen */
void moltiplica(char a[], int la, char x, char r[])
{
   int i, m, riporto;

   /* non serve azzerare <r>, poiche' la moltiplicazione produce
      tante cifre quante sono quelle di <la> e l'eventuale altra
      cifra viene impostata dall'ultimo riporto (eventualmente 0) */
   riporto=0;
   for (i=0; i<la; i++)
   {
      m=a[i]*x+riporto;
      r[i]=(char)(m%10);
      riporto=m/10;
   }
   r[la]=(char)riporto;
}


/*--------------------------------------------------------*/
/* aggiunge <quanti> zeri a destra del numero <a>,
   essendo stato capovolto (LSD in a[0]), questo si ottiene
   aggiungendo degli zeri all'inizio della stringa */
void aggiungiZeri(char a[], int la, int quanti)
{
   int i;

   for (i=la-1; i>=0; i--)
      a[i+quanti]=a[i];
   for (i=quanti-1 ; i>=0; i--)
      a[i]=(char)0;
}


/*--------------------------------------------------------*/
/* somma <a> e <b> e mette il risultato in <a>, si limita a <la>
   cifre (non ce ne sono di piu' in quanto <a> e' la somma dei
   risultati parziali, quindi <a> e' piu' lungo di <b>) */
void somma(char a[], char b[], int la)
{
   int i, riporto, m;

   riporto=0;
   for (i=0; i<la; i++)
   {
      m=a[i]+b[i]+riporto;
      a[i]=(char)(m%10);
      riporto=m/10;
   }
   a[la]=(char)riporto;
}




